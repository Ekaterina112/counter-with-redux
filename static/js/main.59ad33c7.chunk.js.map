{"version":3,"sources":["Counter/Counter.module.css","SettingWindows/SettingWindow.module.css","Button/BTN.tsx","Counter/Counter.tsx","SettingWindows/SettingsWindow.tsx","redux/actions.ts","App.tsx","redux/mainReducer.tsx","redux/store.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","root","borderColor","color","fontFamily","Btn","props","classes","Button","variant","size","onClick","click","disabled","title","Counter","className","s","counter","Paper","elevation","square","style","backgroundColor","count","currentValue","maxValue","maximum","usual","screen","error","buttons","add","reset","Settings","ACTIONS_TYPE","useState","minValue","setMinValue","setMaxValue","checkValue","oldMaxValue","oldMinValue","setError","isNaN","TextField","id","label","type","InputLabelProps","shrink","onChange","e","newValue","Number","parseInt","currentTarget","value","defaultValue","settingValues","App","useSelector","state","dispatch","useDispatch","SETTING_VALUES","SettingValuesAC","COUNTER_ADD","COUNTER_RESET","initialState","store","createStore","action","serialisedState","localStorage","getItem","JSON","parse","console","warn","loadFromLocalStorage","subscribe","stringify","setItem","saveToLocalStorage","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,QAAU,yBAAyB,MAAQ,uBAAuB,QAAU,2B,mBCAlKD,EAAOC,QAAU,CAAC,QAAU,+BAA+B,OAAS,8BAA8B,QAAU,iC,0NCUtGC,EAAYC,YAAW,CACzBC,KAAM,CACFC,YAAa,UACbC,MAAO,UACPC,WAAY,aAkBLC,MAdf,SAAaC,GAET,IAAMC,EAAUR,IAChB,OACI,kBAACS,EAAA,EAAD,CAAQD,QAAS,CACbN,KAAMM,EAAQN,MAEVQ,QAAQ,WACRC,KAAK,QACLC,QAASL,EAAMM,MACfC,SAAUP,EAAMO,UAAWP,EAAMQ,QCkBlCC,MA/Bf,SAAiBT,GAEb,OACI,yBAAKU,UAAWC,IAAEC,SACd,kBAACC,EAAA,EAAD,CAAOC,UAAW,GACXC,QAAQ,EACRC,MAAO,CACHC,gBAAiB,YAGxB,yBACIP,UAAS,UAAKV,EAAMkB,MAAMC,eAAiBnB,EAAMkB,MAAME,SAAWT,IAAEU,QAAUV,IAAEW,MAAvE,YAAgFX,IAAEY,SAC1E,SAAhBvB,EAAMwB,MAAmBxB,EAAMkB,MAAMC,aAAenB,EAAMwB,OAE/D,yBAAKd,UAAWC,IAAEc,SACd,kBAAC,EAAD,CACIjB,MAAM,MACNF,MAAON,EAAM0B,IACbnB,SAA0B,SAAhBP,EAAMwB,OAAoBxB,EAAMkB,MAAMC,eAAiBnB,EAAMkB,MAAME,WAEjF,kBAAC,EAAD,CACIZ,MAAM,QACNF,MAAON,EAAM2B,MACbpB,SAA0B,SAAhBP,EAAMwB,Y,yBC6DzBI,ICpGHC,EDoGGD,EAtFf,SAAkB5B,GAAsB,IAAD,EACL8B,mBAAiB9B,EAAMkB,MAAMa,UADxB,mBAC9BA,EAD8B,KACpBC,EADoB,OAELF,mBAAiB9B,EAAMkB,MAAME,UAFxB,mBAE9BA,EAF8B,KAEpBa,EAFoB,KAInC,SAASC,EAAWd,EAAkBW,EAAkBI,EAAqBC,GACrEhB,GAAYW,GAAYX,EAAW,IAAMW,EAAW,EACpD/B,EAAMqC,SAAS,mBACRC,MAAMP,IAAaO,MAAMlB,GAChCpB,EAAMqC,SAAS,eACRF,IAAgBf,GAAYgB,IAAgBL,EACnD/B,EAAMqC,SAAS,eAEfrC,EAAMqC,SAAS,QAoBvB,OACI,yBAAK3B,UAAWC,IAAEC,SACd,kBAACC,EAAA,EAAD,CAAOG,MAAO,CACVC,gBAAiB,WAEdH,UAAW,GACXC,QAAQ,GAEX,yBAAKL,UAAWC,IAAEY,QACd,6BACI,kBAACgB,EAAA,EAAD,CACIvB,MAAO,CACHlB,WAAY,UACZD,MAAO,UACPD,YAAa,WAEjB4C,GAAG,0BACHC,MAAM,YACNC,KAAK,SACLtC,KAAK,QACLuC,gBAAiB,CACbC,QAAQ,GAEZC,SAvCI,SAACC,GACzB,IAAIC,EAAWC,OAAOC,SAASH,EAAEI,cAAcC,OAC/CjB,EAAWa,EAAUhB,EAAUX,EAAUW,GACzCE,EAAYc,IAqCQK,aAAcpD,EAAMkB,MAAME,SAC1BI,MAAOJ,GAAYW,GAAYX,EAAW,IAAMkB,MAAMlB,MAG9D,6BACI,kBAACmB,EAAA,EAAD,CACIC,GAAG,0BACHC,MAAM,cACNC,KAAK,SACLtC,KAAK,QACLuC,gBAAiB,CACbC,QAAQ,GAEZC,SAhDI,SAACC,GACzB,IAAIC,EAAWC,OAAOC,SAASH,EAAEI,cAAcC,OAC/CjB,EAAWd,EAAU2B,EAAU3B,EAAUW,GACzCC,EAAYe,IA8CQK,aAAcpD,EAAMkB,MAAMa,SAC1BP,MAAOJ,GAAYW,GAAYA,EAAW,GAAKO,MAAMP,OAIjE,yBAAKrB,UAAWC,IAAEc,SACd,kBAAC,EAAD,CACIjB,MAAO,MACPF,MAnDF,WACdN,EAAMqD,cAAcjC,EAAUW,EAAUA,GACxCG,EAAWd,EAAUW,EAAUX,EAAUW,IAkDzBxB,SAA0B,SAAhBP,EAAMwB,OAAoC,gBAAhBxB,EAAMwB,Y,kBC7FtDK,K,0BAAAA,E,8BAAAA,E,iCAAAA,M,KC2CGyB,MAlCf,WACI,IAAIpC,EAAQqC,aAAgD,SAACC,GAAD,OAAWA,KACnEC,EAAWC,cAFJ,EAGa5B,mBAAiB,QAH9B,mBAGNN,EAHM,KAGCa,EAHD,KAiBX,OAAQ,yBAAK3B,UAAW,WAChB,kBAAC,EAAD,CACIQ,MAAOA,EACPmC,cAPZ,SAAuBjC,EAAkBW,EAAkBZ,GACvDsC,EDUuB,SAACrC,EAAkBW,EAAkBZ,GAChE,MAAO,CACHuB,KAAMb,EAAa8B,eACnBvC,SAAUA,EACVW,SAAUA,EACVZ,aAAcA,GCfLyC,CAAgBxC,EAAUW,EAAUZ,KAOrCK,MAAOA,EACPa,SAAUA,IAEd,kBAAC,EAAD,CACInB,MAAOA,EACPQ,IArBZ,WACI+B,EDJG,CACHf,KAAMb,EAAagC,eCwBXlC,MAlBZ,WACI8B,EDEG,CACHf,KAAMb,EAAaiC,iBCeXtC,MAAOA,M,gBC5BVuC,EAAiC,CAC1C3C,SAAU,GACVW,SAAU,EACVZ,aAAc,GCalB,IAAI6C,EAAQC,aDVe,WAA8F,IAA7FT,EAA4F,uDAAlEO,EAAcG,EAAoD,uCACpH,OAAQA,EAAOxB,MACX,KAAMb,EAAagC,YACf,OAAO,eACAL,EADP,CAEIrC,aAAcqC,EAAMrC,aAAe,IAE3C,KAAKU,EAAaiC,cACd,OAAO,eACAN,EADP,CAEIrC,aAAcqC,EAAMzB,WAE5B,KAAKF,EAAa8B,eACd,OAAO,eACAH,EADP,CAEIpC,SAAU8C,EAAO9C,SACjBW,SAAUmC,EAAOnC,SACjBZ,aAAc+C,EAAO/C,eAE7B,QACI,OAAOqC,KCtBnB,WACI,IACI,IAAMW,EAAkBC,aAAaC,QAAQ,mBAC7C,GAAwB,OAApBF,EAA0B,OAC9B,OAAOG,KAAKC,MAAMJ,GACpB,MAAOrB,GAEL,YADA0B,QAAQC,KAAK3B,IAMgB4B,IAGrCV,EAAMW,WAAU,kBAxBhB,SAA8CnB,GAC1C,IACI,IAAMW,EAAkBG,KAAKM,UAAUpB,GACvCY,aAAaS,QAAQ,kBAAmBV,GAC1C,MAAOrB,GACL0B,QAAQC,KAAK3B,IAmBCgC,CAAmBd,EAAMe,eAEhCf,QCvBfgB,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUlB,MAAOA,GACb,kBAAC,EAAD,QAGRmB,SAASC,eAAe,W","file":"static/js/main.59ad33c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__iLbPU\",\"screen\":\"Counter_screen__3c3XY\",\"buttons\":\"Counter_buttons__2pd_h\",\"usual\":\"Counter_usual__218lY\",\"maximum\":\"Counter_maximum__3zQZR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"SettingWindow_counter__18ol5\",\"screen\":\"SettingWindow_screen__3ULO7\",\"buttons\":\"SettingWindow_buttons__1PQMj\"};","import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\n\r\nexport type BtnType = {\r\n    click: () => void\r\n    disabled: boolean\r\n    title: string\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        borderColor: '#ae5c6a',\r\n        color: '#ae5c6a',\r\n        fontFamily: 'inherit'\r\n    },\r\n});\r\n\r\nfunction Btn(props: BtnType) {\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Button classes={{\r\n            root: classes.root,\r\n        }}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                onClick={props.click}\r\n                disabled={props.disabled}>{props.title}</Button>\r\n    );\r\n}\r\n\r\nexport default Btn;\r\n","import React from 'react';\nimport {Paper} from '@material-ui/core';\nimport s from './Counter.module.css'\nimport Btn from '../Button/BTN';\nimport {CurrentStateType} from '../redux/mainReducer';\n\n\nexport type CounterType = {\n    add: () => void\n    reset: () => void\n    disabled?: boolean\n    count: CurrentStateType\n    error: string\n}\n\n\nfunction Counter(props: CounterType) {\n\n    return (\n        <div className={s.counter}>\n            <Paper elevation={24}\n                   square={false}\n                   style={{\n                       backgroundColor: '#dceef8'\n                   }}\n            >\n                <div\n                    className={`${props.count.currentValue === props.count.maxValue ? s.maximum : s.usual} ${s.screen}`}>\n                    {props.error === 'work' ? props.count.currentValue : props.error}\n                </div>\n                <div className={s.buttons}>\n                    <Btn\n                        title=\"add\"\n                        click={props.add}\n                        disabled={props.error !== 'work' || props.count.currentValue === props.count.maxValue}\n                    />\n                    <Btn\n                        title=\"reset\"\n                        click={props.reset}\n                        disabled={props.error !== 'work'}\n                    />\n                </div>\n            </Paper>\n        </div>\n    );\n}\n\nexport default Counter;\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './SettingWindow.module.css'\r\nimport Btn from '../Button/BTN';\r\nimport {Paper, TextField} from '@material-ui/core';\r\nimport {CurrentStateType} from '../redux/mainReducer';\r\n\r\n\r\nexport type SettingsType = {\r\n    count: CurrentStateType\r\n    settingValues: (maxValue: number, minValue: number, currentValue: number) => void\r\n    error: string\r\n    setError: (error: string) => void\r\n}\r\n\r\nfunction Settings(props: SettingsType) {\r\n    let [minValue, setMinValue] = useState<number>(props.count.minValue)\r\n    let [maxValue, setMaxValue] = useState<number>(props.count.maxValue)\r\n\r\n    function checkValue(maxValue: number, minValue: number, oldMaxValue: number, oldMinValue: number) {\r\n        if (maxValue <= minValue || maxValue > 10 || minValue < 0) {\r\n            props.setError('incorrect value')\r\n        } else if (isNaN(minValue) || isNaN(maxValue)) {\r\n            props.setError('enter value')\r\n        } else if (oldMaxValue !== maxValue || oldMinValue !== minValue) {\r\n            props.setError('press \\'set\\'')\r\n        } else {\r\n            props.setError('work')\r\n        }\r\n    }\r\n\r\n    const onChangeForMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newValue = Number.parseInt(e.currentTarget.value)\r\n        checkValue(newValue, minValue, maxValue, minValue)\r\n        setMaxValue(newValue)\r\n    }\r\n    const onChangeForMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newValue = Number.parseInt(e.currentTarget.value)\r\n        checkValue(maxValue, newValue, maxValue, minValue)\r\n        setMinValue(newValue)\r\n    }\r\n\r\n    let setCallback = () => {\r\n        props.settingValues(maxValue, minValue, minValue)\r\n        checkValue(maxValue, minValue, maxValue, minValue)\r\n    }\r\n\r\n    return (\r\n        <div className={s.counter}>\r\n            <Paper style={{\r\n                backgroundColor: '#dceef8'\r\n            }}\r\n                   elevation={24}\r\n                   square={false}\r\n            >\r\n                <div className={s.screen}>\r\n                    <div>\r\n                        <TextField\r\n                            style={{\r\n                                fontFamily: 'inherit',\r\n                                color: '#ae5c6a',\r\n                                borderColor: '#ae5c6a'\r\n                            }}\r\n                            id=\"outlined-password-input\"\r\n                            label=\"Max value\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onChangeForMaxValue}\r\n                            defaultValue={props.count.maxValue}\r\n                            error={maxValue <= minValue || maxValue > 10 || isNaN(maxValue)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <TextField\r\n                            id=\"outlined-password-input\"\r\n                            label=\"Start value\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onChangeForMinValue}\r\n                            defaultValue={props.count.minValue}\r\n                            error={maxValue <= minValue || minValue < 0 || isNaN(minValue)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={s.buttons}>\r\n                    <Btn\r\n                        title={'set'}\r\n                        click={setCallback}\r\n                        disabled={props.error !== 'work' && props.error !== 'press \\'set\\''}/>\r\n                </div>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","export enum ACTIONS_TYPE {\r\n    COUNTER_ADD = 'COUNTER_ADD',\r\n    COUNTER_RESET = 'COUNTER_RESET',\r\n    SETTING_VALUES = 'SETTING_VALUES',\r\n}\r\n\r\nexport type CounterAddType = {\r\n    type: ACTIONS_TYPE.COUNTER_ADD\r\n};\r\n\r\nexport const CounterAddAC = (): CounterAddType => {\r\n    return {\r\n        type: ACTIONS_TYPE.COUNTER_ADD\r\n    };\r\n};\r\n\r\nexport type CounterResetType = {\r\n    type: ACTIONS_TYPE.COUNTER_RESET,\r\n};\r\n\r\nexport const CounterResetAC = (): CounterResetType => {\r\n    return {\r\n        type: ACTIONS_TYPE.COUNTER_RESET,\r\n    };\r\n};\r\n\r\nexport type SettingValuesType = {\r\n    type: ACTIONS_TYPE.SETTING_VALUES,\r\n    maxValue: number,\r\n    minValue: number,\r\n    currentValue: number\r\n};\r\n\r\nexport const SettingValuesAC = (maxValue: number, minValue: number, currentValue: number): SettingValuesType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SETTING_VALUES,\r\n        maxValue: maxValue,\r\n        minValue: minValue,\r\n        currentValue: currentValue\r\n    };\r\n};\r\n\r\nexport type CurrencyReducersTypes = CounterAddType | CounterResetType | SettingValuesType;\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from './Counter/Counter';\nimport Settings from './SettingWindows/SettingsWindow';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {CounterAddAC, CounterResetAC, SettingValuesAC} from './redux/actions';\nimport {CurrentStateType} from './redux/mainReducer';\n\n\nfunction App() {\n    let count = useSelector<CurrentStateType, CurrentStateType>((state) => state)\n    let dispatch = useDispatch()\n    let [error, setError] = useState<string>('work')\n\n    function add() {\n        dispatch(CounterAddAC())\n    }\n\n    function reset() {\n        dispatch(CounterResetAC())\n    }\n\n    function settingValues(maxValue: number, minValue: number, currentValue: number) {\n        dispatch(SettingValuesAC(maxValue, minValue, currentValue))\n    }\n\n    return (<div className={'wrapper'}>\n            <Settings\n                count={count}\n                settingValues={settingValues}\n                error={error}\n                setError={setError}\n            />\n            <Counter\n                count={count}\n                add={add}\n                reset={reset}\n                error={error}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import {ACTIONS_TYPE, CurrencyReducersTypes} from './actions';\r\n\r\n\r\nexport type CurrentStateType = {\r\n    maxValue: number\r\n    minValue: number\r\n    currentValue: number\r\n};\r\n\r\nexport const initialState: CurrentStateType = {\r\n    maxValue: 10,\r\n    minValue: 0,\r\n    currentValue: 0\r\n}\r\n\r\nexport const mainReducer = (state: CurrentStateType = initialState, action: CurrencyReducersTypes): CurrentStateType => {\r\n    switch (action.type) {\r\n        case  ACTIONS_TYPE.COUNTER_ADD:\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue + 1\r\n            }\r\n        case ACTIONS_TYPE.COUNTER_RESET:\r\n            return {\r\n                ...state,\r\n                currentValue: state.minValue\r\n            }\r\n        case ACTIONS_TYPE.SETTING_VALUES:\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue,\r\n                minValue: action.minValue,\r\n                currentValue: action.currentValue\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {createStore} from 'redux';\r\nimport {mainReducer} from './mainReducer';\r\n\r\n\r\nfunction saveToLocalStorage<CurrentStateType>(state: CurrentStateType) {\r\n    try {\r\n        const serialisedState = JSON.stringify(state);\r\n        localStorage.setItem('persistantState', serialisedState);\r\n    } catch (e) {\r\n        console.warn(e);\r\n    }\r\n}\r\n\r\nfunction loadFromLocalStorage() {\r\n    try {\r\n        const serialisedState = localStorage.getItem('persistantState');\r\n        if (serialisedState === null) return undefined;\r\n        return JSON.parse(serialisedState);\r\n    } catch (e) {\r\n        console.warn(e);\r\n        return undefined;\r\n    }\r\n}\r\n\r\n\r\nlet store = createStore(mainReducer, loadFromLocalStorage())\r\n// listen for store changes and use saveToLocalStorage to\r\n// save them to localStorage\r\nstore.subscribe(() => saveToLocalStorage(store.getState()));\r\n\r\nexport default store\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}