{"version":3,"sources":["Counter/Counter.module.css","SettingWindows/SettingWindow.module.css","Button/BTN.tsx","Counter/Counter.tsx","SettingWindows/SettingsWindow.tsx","redux/actions.ts","App.tsx","redux/mainReducer.tsx","redux/store.ts","index.tsx"],"names":["module","exports","Btn","props","Button","style","fontFamily","color","borderColor","variant","size","onClick","click","disabled","title","Counter","className","s","counter","Paper","elevation","square","backgroundColor","count","currentValue","maxValue","maximum","usual","screen","error","buttons","add","reset","Settings","ACTIONS_TYPE","useState","minValue","setMinValue","setMaxValue","checkValue","oldMaxValue","oldMinValue","setError","isNaN","TextField","id","label","type","InputLabelProps","shrink","onChange","e","newValue","Number","parseInt","currentTarget","value","defaultValue","settingValues","App","useSelector","state","dispatch","useDispatch","SETTING_VALUES","SettingValuesAC","COUNTER_ADD","COUNTER_RESET","initialState","store","createStore","action","console","log","serialisedState","localStorage","getItem","JSON","parse","warn","loadFromLocalStorage","subscribe","stringify","setItem","saveToLocalStorage","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ced6dc82.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__2eXFf\",\"screen\":\"Counter_screen__SS4AE\",\"buttons\":\"Counter_buttons__1hStQ\",\"usual\":\"Counter_usual__1XsUw\",\"maximum\":\"Counter_maximum__2nvPA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"SettingWindow_counter__1UpRd\",\"screen\":\"SettingWindow_screen__3oCYu\",\"buttons\":\"SettingWindow_buttons__2d5KM\"};","import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\n\r\n\r\nexport type BtnType = {\r\n    click: () => void\r\n    disabled: boolean\r\n    title: string\r\n}\r\n\r\n\r\nfunction Btn(props: BtnType) {\r\n\r\n    return (\r\n            <Button\r\n                style={{\r\n                    fontFamily: 'inherit',\r\n                    color: '#ae5c6a',\r\n                    borderColor: \"#ae5c6a\"\r\n                }}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                onClick={props.click}\r\n                disabled={props.disabled}\r\n            >\r\n                {props.title} </Button>\r\n    );\r\n}\r\n\r\nexport default Btn;\r\n","import React from 'react';\nimport {Paper} from '@material-ui/core';\nimport s from './Counter.module.css'\nimport Btn from '../Button/BTN';\nimport {CurrentStateType} from '../redux/mainReducer';\n\n\nexport type CounterType = {\n    add: () => void\n    reset: () => void\n    disabled?: boolean\n    count:CurrentStateType\n    error:string\n}\n\n\nfunction Counter(props: CounterType) {\n\n    return (\n      <div className={s.counter}>\n        <Paper elevation={24}\n        square={false}\n               style={{\n                   backgroundColor: \"#dceef8\"\n               }}\n        >\n            <div className={`${props.count.currentValue == props.count.maxValue ? s.maximum : s.usual} ${s.screen}`} >\n             {props.error === 'work' ? props.count.currentValue : props.error}\n            </div>\n            <div className={s.buttons}>\n                <Btn\n                    title=\"add\"\n                    click={props.add}\n                    disabled={props.error!==\"work\"  || props.count.currentValue == props.count.maxValue}\n                />\n                <Btn\n                    title=\"reset\"\n                    click={props.reset}\n                    disabled={props.error!==\"work\"}\n                />\n            </div>\n        </Paper>\n    </div>\n    );\n}\n\nexport default Counter;\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './SettingWindow.module.css'\r\nimport Btn from '../Button/BTN';\r\nimport {Paper, TextField} from '@material-ui/core';\r\nimport {CurrentStateType} from '../redux/mainReducer';\r\n\r\n\r\nexport type SettingsType = {\r\n    count: CurrentStateType\r\n    settingValues: (maxValue: number, minValue: number, currentValue: number) => void\r\n    error: string\r\n    setError: (error: string) => void\r\n}\r\n\r\nfunction Settings(props: SettingsType) {\r\n//delete here states!!!\r\n    let [minValue, setMinValue] = useState<number>(props.count.minValue)\r\n    let [maxValue, setMaxValue] = useState<number>(props.count.maxValue)\r\n\r\n    function checkValue(maxValue: number, minValue: number, oldMaxValue: number, oldMinValue: number) {\r\n        if (maxValue <= minValue || maxValue > 10 || minValue < 0) {\r\n            props.setError('incorrect value')\r\n        } else if (isNaN(minValue) || isNaN(maxValue)) {\r\n            props.setError('enter value')\r\n        } else if (oldMaxValue != maxValue || oldMinValue != minValue) {\r\n            props.setError('press \\'set\\'')\r\n        } else {\r\n            props.setError('work')\r\n        }\r\n    }\r\n\r\n    const onChangeForMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newValue = Number.parseInt(e.currentTarget.value)\r\n        checkValue(newValue, minValue, maxValue, minValue)\r\n        setMaxValue(newValue)\r\n    }\r\n    const onChangeForMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newValue = Number.parseInt(e.currentTarget.value)\r\n        checkValue(maxValue, newValue, maxValue, minValue)\r\n        setMinValue(newValue)\r\n    }\r\n\r\n    let setCallback = () => {\r\n        props.settingValues(maxValue, minValue, minValue)\r\n        checkValue(maxValue, minValue, maxValue, minValue)\r\n    }\r\n\r\n    return (\r\n        <div className={s.counter}>\r\n            <Paper style={{\r\n                backgroundColor: '#dceef8'\r\n            }}\r\n                   elevation={24}\r\n                   square={false}\r\n            >\r\n                <div className={s.screen}>\r\n                    <div>\r\n                        <TextField\r\n                            style={{\r\n                                fontFamily: 'inherit',\r\n                                color: '#ae5c6a',\r\n                                borderColor: '#ae5c6a'\r\n                            }}\r\n                            id=\"outlined-password-input\"\r\n                            label=\"Max value\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onChangeForMaxValue}\r\n                            defaultValue={props.count.maxValue}\r\n                            error={maxValue <= minValue || maxValue > 10 || isNaN(maxValue)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <TextField\r\n                            id=\"outlined-password-input\"\r\n                            label=\"Start value\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={onChangeForMinValue}\r\n                            defaultValue={props.count.minValue}\r\n                            error={maxValue <= minValue || minValue < 0 || isNaN(minValue)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={s.buttons}>\r\n                    <Btn\r\n                        title={'set'}\r\n                        click={setCallback}\r\n                       disabled={props.error !== 'work' && props.error !== 'press \\'set\\''}/>\r\n                </div>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","export enum ACTIONS_TYPE {\r\n    //enum ведет себя как обьект ACTION.TYPE получаем доступ ко всем константам\r\n    COUNTER_ADD = 'COUNTER_ADD',\r\n    COUNTER_RESET = 'COUNTER_RESET',\r\n    SETTING_VALUES = 'SETTING_VALUES',\r\n}\r\n\r\nexport type CounterAddType = {\r\n    type: ACTIONS_TYPE.COUNTER_ADD\r\n};\r\n\r\nexport const CounterAddAC = (): CounterAddType => {\r\n    return {\r\n        type: ACTIONS_TYPE.COUNTER_ADD\r\n    };\r\n};\r\n\r\nexport type CounterResetType = {\r\n    type: ACTIONS_TYPE.COUNTER_RESET,\r\n};\r\n\r\nexport const CounterResetAC = (): CounterResetType => {\r\n    return {\r\n        type: ACTIONS_TYPE. COUNTER_RESET,\r\n    };\r\n};\r\n\r\nexport type SettingValuesType = {\r\n    type: ACTIONS_TYPE.SETTING_VALUES,\r\n    maxValue: number,\r\n    minValue:number,\r\n    currentValue:number\r\n};\r\n\r\nexport const SettingValuesAC = ( maxValue: number, minValue:number, currentValue:number): SettingValuesType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SETTING_VALUES,\r\n        maxValue: maxValue,\r\n        minValue: minValue,\r\n        currentValue:currentValue\r\n    };\r\n};\r\n\r\nexport type CurrencyReducersTypes =  CounterAddType | CounterResetType | SettingValuesType;\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from './Counter/Counter';\nimport Settings from './SettingWindows/SettingsWindow';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {CounterAddAC, CounterResetAC, SettingValuesAC} from './redux/actions';\nimport {CurrentStateType} from './redux/mainReducer';\n\n//не очень понимаю как работает local storage,\n//типизация useSelector => что входит и что выходит\n\nfunction App() {\n    let count = useSelector<CurrentStateType, CurrentStateType>((state)=> state)\n    let dispatch = useDispatch()\n\n\n    let [error, setError] = useState<string>('work')\n\n\n    function add() {\n        dispatch(CounterAddAC())\n    }\n    function reset() {\n        dispatch(CounterResetAC())\n    }\n    function settingValues(maxValue: number, minValue: number, currentValue: number) {\n        dispatch(SettingValuesAC(maxValue, minValue, currentValue))\n    }\n\n    return (<div className={'wrapper'}>\n            <Settings\n                count={count}\n                settingValues={settingValues}\n                error={error}\n                setError={setError}\n            />\n            <Counter\n                count={count}\n                add={add}\n                reset={reset}\n                error={error}\n            />\n        </div>\n\n\n    );\n}\n\nexport default App;\n","import {ACTIONS_TYPE, CurrencyReducersTypes} from './actions';\r\n\r\n\r\nexport type CurrentStateType = {\r\n    maxValue: number\r\n    minValue: number\r\n    currentValue: number\r\n};\r\n\r\nexport const initialState: CurrentStateType = {\r\n    maxValue: 10,\r\n    minValue: 0,\r\n    currentValue:0\r\n}\r\n\r\nexport const mainReducer = (state: CurrentStateType = initialState, action: CurrencyReducersTypes): CurrentStateType => {\r\n    console.log(initialState)\r\n    switch (action.type) {\r\n        case  ACTIONS_TYPE.COUNTER_ADD:\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue+1\r\n            }\r\n        case ACTIONS_TYPE.COUNTER_RESET:\r\n            return {\r\n                ...state,\r\n                currentValue:state.minValue\r\n            }\r\n        case ACTIONS_TYPE.SETTING_VALUES:\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue,\r\n                minValue: action.minValue,\r\n                currentValue:action.currentValue\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createStore, combineReducers} from 'redux';\r\nimport {mainReducer} from './mainReducer';\r\n\r\n\r\n\r\nfunction saveToLocalStorage<CurrentStateType>(state:CurrentStateType) {\r\n    try {\r\n        const serialisedState = JSON.stringify(state);\r\n        localStorage.setItem(\"persistantState\", serialisedState);\r\n    } catch (e) {\r\n        console.warn(e);\r\n    }\r\n}\r\n\r\nfunction loadFromLocalStorage() {\r\n    try {\r\n        const serialisedState = localStorage.getItem(\"persistantState\");\r\n        if (serialisedState === null) return undefined;\r\n        return JSON.parse(serialisedState);\r\n    } catch (e) {\r\n        console.warn(e);\r\n        return undefined;\r\n    }\r\n}\r\n\r\n\r\nlet store = createStore(mainReducer,loadFromLocalStorage())\r\n// listen for store changes and use saveToLocalStorage to\r\n// save them to localStorage\r\nstore.subscribe(() => saveToLocalStorage(store.getState()));\r\n\r\nexport default store\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}